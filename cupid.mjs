/**
 * @fileoverview This is a Node.js file that uses the OpenAI API and Discord API to create a chatbot that takes a prompt from a file called "prompt.txt",
 * sends it to OpenAI's GPT-3.5-turbo model to generate a response, and then sends that response to a specified Discord channel.
 */

import * as fs from 'node:fs'

await main(process.env)

/**
 * Takes the environment variables OPENAI_API_KEY, DISCORD_API_KEY, and DISCORD_CHANNEL_ID as input, reads the prompt from "prompt.txt",
 * sends it to the OpenAI API to generate a response using the GPT-3.5-turbo model, and sends the generated response to the specified Discord channel.
 * @param {Object} env - An object containing environment variables as key-value pairs.
 * @param {string} env.OPENAI_API_KEY - The API key for the OpenAI API.
 * @param {string} env.DISCORD_API_KEY - The API key for the Discord API.
 * @param {string} env.DISCORD_CHANNEL_ID - The ID of the Discord channel where the response should be sent.
 * @throws {Error} Will throw an error if any of the required environment variables are not set or if there is an error with the OpenAI or Discord API.
 */
async function main ({ OPENAI_API_KEY, DISCORD_API_KEY, DISCORD_CHANNEL_ID }) {
  if (!(OPENAI_API_KEY)) throw new Error('Variable "OPENAI_API_KEY" is not set')
  if (!(DISCORD_API_KEY)) throw new Error('Variable "DISCORD_API_KEY" is not set')
  if (!(DISCORD_CHANNEL_ID)) throw new Error('Variable "DISCORD_API_KEY" is not set')

  while (true) {
    const message = await getMessage({ OPENAI_API_KEY })
    if (message.match(/[[(].*[)\]]/)) continue /* dismiss messages with placeholders */
    await sendMessage({ DISCORD_API_KEY, DISCORD_CHANNEL_ID }, message)
    break
  }
}

/**
 * Retrieves a message from the OpenAI API using the GPT-3.5-turbo model.
 * @param {Object} env - An object containing environment variables as key-value pairs.
 * @param {string} env.OPENAI_API_KEY - The API key for the OpenAI API.
 * @returns {Promise<string>} The message generated by the OpenAI API.
 * @throws {Error} Will throw an error if there is an error with the OpenAI API.
 */
async function getMessage ({ OPENAI_API_KEY }) {
  const openai = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: { Authorization: `Bearer ${OPENAI_API_KEY}`, 'Content-Type': 'application/json', 'User-Agent': 'OpenAIBot (https://openai.com, 0.1)' },
    body: JSON.stringify({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'user', content: `${await fs.promises.readFile('prompt.txt', { encoding: 'utf-8' })}\n\nIt is ${new Date()}.` }
      ],
    })
  })

  if (openai.status !== 200) {
    const body = await openai.json()
    throw new Error(`OpenAI API returned status code ${openai.status}: ${body.error.message}`)
  }

  const message = (await openai.json()).choices[0].message.content.trim()
  return message
}

/**
 * Sends a message to a Discord channel.
 * @param {string} env.DISCORD_API_KEY - The API key for the Discord API.
 * @param {string} env.DISCORD_CHANNEL_ID - The ID of the Discord channel where the response should be sent.
 * @throws {Error} Will throw an error if there is an error with the Discord API.
 */
async function sendMessage ({ DISCORD_API_KEY, DISCORD_CHANNEL_ID }, message) {
  const discord = await fetch(`https://discord.com/api/v9/channels/${DISCORD_CHANNEL_ID}/messages`, {
    method: 'POST',
    headers: { Authorization: DISCORD_API_KEY, 'Content-Type': 'application/json', 'User-Agent': 'DiscordBot (https://discord.com, 0.1)' },
    body: JSON.stringify({ content: message })
  })

  if (discord.status !== 200) {
    const body = await discord.json()
    throw new Error(`Discord API returned status code ${discord.status}: ${body.message}`)
  }
}
